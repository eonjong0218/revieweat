name: ReviewEat Backend & Database CI

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - 'docker-compose.yml'
      - 'database/**'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - 'docker-compose.yml'
      - 'database/**'
  workflow_dispatch:
  schedule:
    - cron: '0 15 * * *'  # 매일 한국 시간 자정(00:00)에 자동 실행

jobs:
  revieweat-backend-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create environment file
        run: |
          cat > backend/.env << 'EOF'
          DATABASE_URL=postgresql://postgres:postgres@db:5432/revieweat
          SECRET_KEY=${{ secrets.SECRET_KEY || 'revieweat-test-secret-key-for-ci-cd-pipeline' }}
          ACCESS_TOKEN_EXPIRE_MINUTES=30
          EOF

      - name: Verify ReviewEat project structure
        run: |
          echo "🔍 Verifying ReviewEat project structure..."
          
          # 필수 파일들 확인
          files_to_check=(
            "docker-compose.yml"
            "backend/Dockerfile"
            "backend/requirements.txt"
            "backend/wait-for-it.sh"
            "backend/app/main.py"
            "backend/app/database.py"
            "backend/app/models.py"
            "backend/app/schemas.py"
            "backend/app/crud.py"
            "backend/app/auth.py"
            "backend/app/config.py"
            "backend/app/dependencies.py"
            "database/init.sql"
          )
          
          for file in "${files_to_check[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file found"
            else
              echo "❌ $file missing"
              exit 1
            fi
          done
          
          # wait-for-it.sh 실행 권한 부여
          chmod +x backend/wait-for-it.sh
          echo "✅ ReviewEat project structure verified"

      - name: Build and start ReviewEat services
        run: |
          echo "🐳 Building and starting ReviewEat Docker Compose services..."
          docker compose up -d --build
          
          echo "📊 Initial container status:"
          docker compose ps

      - name: Wait for PostgreSQL database
        run: |
          echo "⏳ Waiting for ReviewEat PostgreSQL database..."
          timeout=180
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            if docker compose exec -T db pg_isready -U postgres -d revieweat; then
              echo "✅ PostgreSQL is ready after ${elapsed}s!"
              break
            fi
            
            if [ $elapsed -ge $timeout ]; then
              echo "❌ PostgreSQL failed to be ready after ${timeout}s"
              docker compose logs db
              exit 1
            fi
            
            echo "⏳ Waiting for PostgreSQL... (${elapsed}s/${timeout}s)"
            sleep 5
            elapsed=$((elapsed + 5))
          done

      - name: Verify ReviewEat database schema
        run: |
          echo "🗄️ Verifying ReviewEat database schema..."
          
          # 테이블 존재 확인
          tables=("users" "search_history" "reviews")
          for table in "${tables[@]}"; do
            result=$(docker compose exec -T db psql -U postgres -d revieweat -t -c "
              SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = '$table'
              );
            ")
            
            if [[ "$result" == *"t"* ]]; then
              echo "✅ Table '$table' exists"
            else
              echo "❌ Table '$table' missing"
              exit 1
            fi
          done
          
          # 인덱스 확인
          echo "🔍 Checking ReviewEat database indexes..."
          indexes=$(docker compose exec -T db psql -U postgres -d revieweat -t -c "
            SELECT count(*) FROM pg_indexes WHERE schemaname = 'public';
          ")
          echo "✅ Found $(echo $indexes | tr -d ' ') indexes in database"
          
          # 외래키 관계 확인
          echo "🔗 Checking foreign key relationships..."
          fk_count=$(docker compose exec -T db psql -U postgres -d revieweat -t -c "
            SELECT count(*) FROM information_schema.table_constraints 
            WHERE constraint_type = 'FOREIGN KEY' AND table_schema = 'public';
          ")
          echo "✅ Found $(echo $fk_count | tr -d ' ') foreign key constraints"

      - name: Wait for ReviewEat FastAPI backend
        run: |
          echo "⏳ Waiting for ReviewEat FastAPI backend..."
          timeout=180
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            if curl -f http://localhost:8000/docs > /dev/null 2>&1; then
              echo "✅ ReviewEat FastAPI backend is ready after ${elapsed}s!"
              break
            fi
            
            if [ $elapsed -ge $timeout ]; then
              echo "❌ FastAPI backend failed to be ready after ${timeout}s"
              echo "=== Backend Logs ==="
              docker compose logs backend
              exit 1
            fi
            
            echo "⏳ Waiting for FastAPI backend... (${elapsed}s/${timeout}s)"
            sleep 5
            elapsed=$((elapsed + 5))
          done

      - name: Test ReviewEat API endpoints
        run: |
          echo "🧪 Testing ReviewEat API endpoints..."
          
          # 1. FastAPI docs 페이지 테스트
          echo "Testing /docs endpoint..."
          if curl -f http://localhost:8000/docs > /dev/null 2>&1; then
            echo "✅ /docs endpoint OK - FastAPI is working"
          else
            echo "❌ /docs endpoint failed"
            exit 1
          fi
          
          # 2. OpenAPI schema 테스트
          echo "Testing /openapi.json endpoint..."
          openapi_response=$(curl -s http://localhost:8000/openapi.json)
          if echo "$openapi_response" | grep -q "ReviewEat\|User\|Review\|Search"; then
            echo "✅ /openapi.json contains ReviewEat API schema"
          else
            echo "❌ /openapi.json schema validation failed"
            exit 1
          fi
          
          # 3. 회원가입 엔드포인트 구조 테스트
          echo "Testing /register endpoint structure..."
          register_response=$(curl -s -X POST http://localhost:8000/register \
            -H "Content-Type: application/json" \
            -d '{}')
          if echo "$register_response" | grep -q "detail\|field required"; then
            echo "✅ /register endpoint validation working"
          else
            echo "⚠️ /register endpoint response: $register_response"
          fi
          
          # 4. 로그인 엔드포인트 구조 테스트
          echo "Testing /token endpoint structure..."
          token_response=$(curl -s -X POST http://localhost:8000/token \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "username=test&password=test")
          if echo "$token_response" | grep -q "detail\|Incorrect"; then
            echo "✅ /token endpoint validation working"
          else
            echo "⚠️ /token endpoint response: $token_response"
          fi

      - name: Test ReviewEat database operations
        run: |
          echo "🗄️ Testing ReviewEat database CRUD operations..."
          
          # 1. 사용자 생성 테스트
          echo "Testing User CRUD operations..."
          docker compose exec -T db psql -U postgres -d revieweat -c "
            INSERT INTO users (email, username, hashed_password, role) 
            VALUES ('citest@revieweat.com', 'revieweat_ci_user', '\$2b\$12\$test.hash.here', 'user')
            ON CONFLICT (email) DO NOTHING;
          "
          
          user_id=$(docker compose exec -T db psql -U postgres -d revieweat -t -c "
            SELECT id FROM users WHERE email = 'citest@revieweat.com';
          ")
          user_id=$(echo $user_id | tr -d ' ')
          
          if [ ! -z "$user_id" ] && [ "$user_id" != "" ]; then
            echo "✅ User creation successful (ID: $user_id)"
          else
            echo "❌ User creation failed"
            exit 1
          fi
          
          # 2. 리뷰 생성 테스트
          echo "Testing Review CRUD operations..."
          docker compose exec -T db psql -U postgres -d revieweat -c "
            INSERT INTO reviews (user_id, place_name, place_address, review_date, rating, companion, review_text, image_paths) 
            VALUES (
              $user_id,
              'ReviewEat CI 테스트 맛집', 
              '서울시 강남구 테스트로 123', 
              NOW(), 
              '5', 
              '동료', 
              'CI 테스트용 리뷰입니다. ReviewEat 앱이 정상 작동합니다!',
              '/uploads/ci_test_image.jpg'
            );
          "
          
          review_count=$(docker compose exec -T db psql -U postgres -d revieweat -t -c "
            SELECT COUNT(*) FROM reviews WHERE user_id = $user_id;
          ")
          
          if [ $(echo $review_count | tr -d ' ') -ge 1 ]; then
            echo "✅ Review creation successful"
          else
            echo "❌ Review creation failed"
            exit 1
          fi
          
          # 3. 검색 기록 생성 테스트
          echo "Testing SearchHistory CRUD operations..."
          docker compose exec -T db psql -U postgres -d revieweat -c "
            INSERT INTO search_history (query, is_place, name, user_id) 
            VALUES ('ReviewEat CI 검색 테스트', true, 'CI 테스트 장소', $user_id);
          "
          
          search_count=$(docker compose exec -T db psql -U postgres -d revieweat -t -c "
            SELECT COUNT(*) FROM search_history WHERE user_id = $user_id;
          ")
          
          if [ $(echo $search_count | tr -d ' ') -ge 1 ]; then
            echo "✅ SearchHistory creation successful"
          else
            echo "❌ SearchHistory creation failed"
            exit 1
          fi
          
          # 4. 관계 테이블 조인 테스트
          echo "Testing table relationships..."
          join_result=$(docker compose exec -T db psql -U postgres -d revieweat -t -c "
            SELECT u.username, COUNT(r.id) as review_count, COUNT(s.id) as search_count
            FROM users u
            LEFT JOIN reviews r ON u.id = r.user_id
            LEFT JOIN search_history s ON u.id = s.user_id
            WHERE u.email = 'citest@revieweat.com'
            GROUP BY u.id, u.username;
          ")
          echo "✅ Table relationships working: $join_result"
          
          # 5. 테스트 데이터 정리
          echo "Cleaning up test data..."
          docker compose exec -T db psql -U postgres -d revieweat -c "
            DELETE FROM search_history WHERE user_id = $user_id;
            DELETE FROM reviews WHERE user_id = $user_id;
            DELETE FROM users WHERE email = 'citest@revieweat.com';
          "
          echo "✅ Test data cleanup completed"

      - name: Test ReviewEat file upload structure
        run: |
          echo "📁 Testing ReviewEat file upload functionality..."
          
          # uploads 디렉토리 확인
          if docker compose exec -T backend test -d "uploads"; then
            echo "✅ uploads directory exists in backend container"
            docker compose exec -T backend ls -la uploads/ || echo "uploads directory is empty (expected)"
          else
            echo "ℹ️ uploads directory will be created when needed"
          fi
          
          # 이미지 처리 관련 패키지 확인
          echo "📷 Checking image processing capabilities..."
          docker compose exec -T backend python -c "
          try:
              import PIL
              print('✅ PIL (Pillow) available for image processing')
          except ImportError:
              print('ℹ️ PIL not installed - images will be stored as-is')
          
          try:
              import os
              print(f'✅ OS module available for file operations')
          except ImportError:
              print('❌ OS module not available')
          "

      - name: ReviewEat performance and health check
        run: |
          echo "⚡ Running ReviewEat performance and health checks..."
          
          # 컨테이너 리소스 사용량
          echo "📊 Container resource usage:"
          docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"
          
          # 데이터베이스 성능 확인
          echo "🗄️ Database performance check:"
          docker compose exec -T db psql -U postgres -d revieweat -c "
            SELECT 
              schemaname,
              tablename,
              n_tup_ins as inserts,
              n_tup_upd as updates,
              n_tup_del as deletes
            FROM pg_stat_user_tables 
            WHERE schemaname = 'public'
            ORDER BY tablename;
          "
          
          # 활성 연결 수 확인
          echo "🔗 Active database connections:"
          docker compose exec -T db psql -U postgres -d revieweat -c "
            SELECT count(*) as active_connections,
                   (SELECT count(*) FROM users) as total_users,
                   (SELECT count(*) FROM reviews) as total_reviews,
                   (SELECT count(*) FROM search_history) as total_searches
            FROM pg_stat_activity 
            WHERE state = 'active';
          "
          
          # 최종 컨테이너 상태
          echo "🏥 Final ReviewEat service status:"
          docker compose ps

      - name: Show detailed logs on failure
        if: failure()
        run: |
          echo "=== 🔍 REVIEWEAT CI DEBUGGING INFORMATION ==="
          
          echo "=== Container Status ==="
          docker compose ps
          
          echo "=== Backend Container Logs ==="
          docker compose logs backend
          
          echo "=== Database Container Logs ==="
          docker compose logs db
          
          echo "=== Environment Variables Check ==="
          docker compose exec -T backend env | grep -E "(DATABASE_URL|SECRET_KEY)" || echo "Could not read env vars"
          
          echo "=== Network Connectivity ==="
          docker compose exec -T backend ping -c 3 db || echo "Cannot ping database"
          
          echo "=== Database Connection Test ==="
          docker compose exec -T backend python -c "
          import os
          import psycopg2
          try:
              conn = psycopg2.connect(os.getenv('DATABASE_URL'))
              print('✅ Database connection successful')
              conn.close()
          except Exception as e:
              print(f'❌ Database connection failed: {e}')
          " || echo "Could not test database connection"

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up ReviewEat CI environment..."
          docker compose down -v
          docker system prune -f
          echo "✅ ReviewEat CI cleanup completed"
