version: '3.8'  # docker-compose 파일 버전

services:
  db:  
    image: postgres:15-alpine  # PostgreSQL 15 버전의 경량 Alpine 이미지 사용
    container_name: revieweat_db  # 컨테이너 이름 지정
    restart: unless-stopped  # 컨테이너가 중지되지 않는 한 자동 재시작
    ports:
      - "5432:5432"  # 호스트:컨테이너 포트 매핑 (DB 접속용)
    environment:
      POSTGRES_USER: postgres  # DB 접속 사용자명
      POSTGRES_PASSWORD: postgres  # DB 접속 비밀번호
      POSTGRES_DB: revieweat  # 생성할 데이터베이스 이름
    volumes:
      - pgdata:/var/lib/postgresql/data  # DB 데이터 파일을 위한 볼륨 (영속성 보장)
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql  # 컨테이너 최초 구동 시 실행할 초기화 SQL 스크립트
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d revieweat"]  # DB 준비 여부를 확인하는 헬스체크 명령
      interval: 10s  # 헬스체크 주기 (10초)
      timeout: 5s  # 헬스체크 타임아웃 (5초)
      retries: 5  # 실패 허용 횟수 (5회)

  backend:
    build:
      context: ./backend  # Dockerfile이 위치한 빌드 컨텍스트 경로
      dockerfile: Dockerfile  # 사용할 Dockerfile 이름
    container_name: revieweat_backend  # 컨테이너 이름 지정
    restart: unless-stopped  # 컨테이너가 중지되지 않는 한 자동 재시작
    ports:
      - "8000:8000"  # 호스트:컨테이너 포트 매핑 (API 접속용)
    depends_on:
      db:
        condition: service_healthy  # db 서비스가 헬시(정상) 상태일 때만 실행 시작
    volumes:
      - ./backend:/app  # 소스 코드 변경 시 바로 반영 (개발 편의)
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/revieweat  # DB 연결 정보 환경변수
      - SECRET_KEY=your-secure-secret-key-change-in-production  # JWT 등에서 사용할 시크릿 키
      - ACCESS_TOKEN_EXPIRE_MINUTES=30  # 액세스 토큰 만료 시간(분)
    working_dir: /app  # 컨테이너 내 작업 디렉토리
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload  # 백엔드 실행 커맨드 (개발용: 코드 변경시 자동 재시작)

volumes:
  pgdata:  # DB 데이터 영속성을 위한 볼륨 정의
  